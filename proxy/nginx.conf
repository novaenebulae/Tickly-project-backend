server {
    listen 80;
    server_name localhost;
    charset utf-8;
    client_max_body_size 20M;

    # Logs pour le debug
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log debug;

    # Configuration du proxy pour l'API
    location /api/ {
        proxy_pass http://backend:8080;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Configuration pour les WebSockets
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_read_timeout 86400;

        # SUPPRESSION : Laisser le backend Spring Boot gérer les CORS
        # Les headers CORS sont déjà configurés dans votre backend Java
        # Ne pas les dupliquer ici !
    }

    # Configuration pour les fichiers statiques avec CORS
    location /static/ {
        alias /var/www/html/static/;

        # Headers CORS pour les images seulement
        add_header 'Access-Control-Allow-Origin' 'http://localhost:4200' always;
        add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Content-Type' always;

        # Gestion des requêtes OPTIONS pour les images
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' 'http://localhost:4200' always;
            add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Content-Type' always;
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }

        try_files $uri $uri/ =404;
    }

    location /swagger-ui.html {
        proxy_pass http://backend:8080/swagger-ui.html;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /swagger-ui/ {
        proxy_pass http://backend:8080/swagger-ui/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /api/v1/api-docs {
        proxy_pass http://backend:8080/api/v1/api-docs;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }


    # Endpoint de test direct
    location /proxy-test {
        proxy_pass http://backend:8080/api/v1/api-docs;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Endpoint de santé
    location /health {
        return 200 'Proxy OK - Backend: backend:8080';
        add_header Content-Type text/plain;
    }

    # Configuration pour la racine
    location / {
        return 200 'Tickly Backend API\n\nEndpoints disponibles:\n- API: /api/v1/\n- Fichiers statiques: /static/\n- Sante: /health\n- Test proxy: /proxy-test';
        add_header Content-Type text/plain;
    }
}